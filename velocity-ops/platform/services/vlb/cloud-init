#!/bin/bash
apt update
apt install -y jq haproxy

cat << 'EOT' > /root/genhaproxy.sh
#!/bin/bash

DOMAIN=".$(cat /etc/hosts | egrep -e '^search' | awk '{print $2}')"
if [ "$DOMAIN" = "." ]; then DOMAIN=; fi

mkdir -p /etc/ssl/private

DOMAIN=".$(cat /etc/resolv.conf | egrep -e '^search' | awk '{print $2}')"
HOSTS="$(curl http://169.254.169.254/openstack/latest/meta_data.json | jq '.meta | .lb_hosts' | cut -d'"' -f 2)"
for h in $HOSTS; do
    h=$(echo $h | cut -d',' -f1) 
    if [ -z "$LB_HOSTS" ]; then
        LB_HOSTS="DNS:${h}${DOMAIN}"
    else
        LB_HOSTS="$LB_HOSTS,DNS:${h}${DOMAIN}"
    fi
    DEFAULT=$h
done


cat << EOF > /etc/openssl${DOMAIN}.cnf
FQDN = $(hostname)${DOMAIN}
ORGNAME = NodeLogic
ALTNAMES = $LB_HOSTS
EOF

cat << 'EOF' >> /etc/openssl${DOMAIN}.cnf

# --- no modifications required below ---
[ req ]
default_bits = 2048
default_md = sha256
prompt = no
encrypt_key = no
distinguished_name = dn
req_extensions = req_ext

[ dn ]
C = CH
O = $ORGNAME
CN = $FQDN

[ req_ext ]
subjectAltName = $ALTNAMES
EOF

#gen ssl cert
openssl genrsa  -out /etc/ssl/my${DOMAIN}.key 2048 

# Generating a Certificate Signing Request (CSR)
openssl req -config /etc/openssl${DOMAIN}.cnf  -new -key /etc/ssl/my${DOMAIN}.key -out /etc/ssl/my${DOMAIN}.csr

# Creating a Self-Signed Certificate (CRT)
openssl x509  -req -days 365 -in /etc/ssl/my${DOMAIN}.csr -signkey /etc/ssl/my${DOMAIN}.key -out /etc/ssl/my${DOMAIN}.crt

# Append KEY and CRT to mydomain.pem
cat /etc/ssl/my${DOMAIN}.key /etc/ssl/my${DOMAIN}.crt > /etc/ssl/private/my${DOMAIN}.pem


mkdir haproxy-cfg
cd haproxy-cfg
cat << EOF > global
global  
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

EOF

cat << EOF > frontend_web
frontend web
    bind 0.0.0.0:443 ssl crt /etc/ssl/private

EOF

HOSTS="$(curl http://169.254.169.254/openstack/latest/meta_data.json | jq '.meta | .lb_hosts' | cut -d'"' -f 2)"

for h in $HOSTS; do

        INSTANCE=$(echo $h | cut -d',' -f 1)
        INSTANCE_INBOUND=$(echo $h | cut -d',' -f2 | cut -d':' -f 1)
    INSTANCE_DEST=$(echo $h | cut -d ':' -f 2|sed -e 's/,/:/')
    if [ "$INSTANCE_INBOUND" = "www" ]; then 
        cat << EOF >> frontend_web
    acl ${INSTANCE}_host hdr(host) -i ${INSTANCE}${DOMAIN}
    use_backend $INSTANCE if ${INSTANCE}_host
    
EOF

        cat << EOF >> backend
backend ${INSTANCE}
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    server ${INSTANCE}_instance ${INSTANCE_DEST} check

EOF
    else
        cat << EOF >> frontend
frontend ${INSTANCE}_frontend
        bind 0.0.0.0:${INSTANCE_INBOUND}
        use_backend ${INSTANCE}_${INSTANCE_INBOUND}

EOF
        cat << EOF >> backend
backend ${INSTANCE}_${INSTANCE_INBOUND}
    server ${INSTANCE}_instance ${INSTANCE_DEST} check

EOF
    fi
done

echo "    default_backend ${DEFAULT}" >> frontend_web
echo "" >> frontend_web

cat global > /etc/haproxy/haproxy.cfg
cat frontend* >> /etc/haproxy/haproxy.cfg
cat backend >> /etc/haproxy/haproxy.cfg
cd ..
rm -rf haproxy-cfg
service haproxy restart

EOT

chmod 700 /root/genhaproxy.sh
/root/genhaproxy.sh
